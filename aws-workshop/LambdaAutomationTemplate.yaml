AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  This CloudFormation template creates a simple Lambda function and an API Gateway resource with a GET method that triggers the Lambda function.

Parameters:
  LogBucket:
    Type: String
    Default: test-cloud-s3-bucket
  
  APIGetewayStageName:
    Default: AWSdata
    Type: String
  
  APIHTTPMethod:
    Type: String
    Default: ANY

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref LogBucket
  
  LogAPIGeteway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
          Types:
            - REGIONAL
      Name: LogAPIGateway
  
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: !Ref APIHTTPMethod
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LogTimestampLambdaFunction.Arn
      ResourceId: !GetAtt LogAPIGeteway.RootResourceId
      RestApiId: !Ref LogAPIGeteway

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref LogAPIGeteway
      StageName: !Ref APIGetewayStageName
  
  LogTimestampLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:GetObject
              - s3:PutObject
            Resource: '*'
  
  LogTimestampLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 50
      Handler: lambda_function.lambda_handler
      CodeUri: lambda_function.py
      Role: !GetAtt LogTimestampLambdaFunctionRole.Arn
  
  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LogTimestampLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LogAPIGeteway}/${APIGetewayStageName}/${APIHTTPMethod}/

Outputs:
  LambdaFunctionName:
    Value: !Ref LogTimestampLambdaFunction
  ApiGatewayUrl:
    Value: !Sub https://${LogAPIGeteway}.execute-api.${AWS::Region}.amazonaws.com/${APIGetewayStageName}